package com.sdx.merak.common.fdfs.client;

import java.io.File;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;

import com.sdx.merak.common.fdfs.FastdfsClientConfig;
import com.sdx.merak.common.fdfs.command.ActiveTestCmd;
import com.sdx.merak.common.fdfs.command.CloseCmd;
import com.sdx.merak.common.fdfs.command.Command;
import com.sdx.merak.common.fdfs.command.UploadCmd;
import com.sdx.merak.common.fdfs.data.Result;

public class StorageClientImpl extends AbstractClient implements StorageClient {

	private Socket socket;
	private String host;
	private Integer port;
	private Integer connectTimeout = FastdfsClientConfig.DEFAULT_CONNECT_TIMEOUT * 1000;
	private Integer networkTimeout = FastdfsClientConfig.DEFAULT_NETWORK_TIMEOUT * 1000;

	private Socket getSocket() throws IOException {
		if (socket == null) {
			socket = new Socket();
			socket.setSoTimeout(networkTimeout);
			socket.connect(new InetSocketAddress(host, port), connectTimeout);
		}
		return socket;
	}

	public StorageClientImpl(String address) {
		super();
		String[] hostport = address.split(":");
		this.host = hostport[0];
		this.port = Integer.valueOf(hostport[1]);
	}

	public StorageClientImpl(String address, Integer connectTimeout, Integer networkTimeout) {
		this(address);
		this.connectTimeout = connectTimeout;
		this.networkTimeout = networkTimeout;
	}

	public void close() throws IOException {
		Socket socket = getSocket();
		Command<Boolean> command = new CloseCmd();
		command.exec(socket);
		socket.close();
		socket = null;
	}

	public Result<String> upload(File file, String fileName, byte storePathIndex) throws IOException {
		Socket socket = getSocket();
		UploadCmd uploadCmd = new UploadCmd(file, fileName, storePathIndex);
		return uploadCmd.exec(socket);
	}

	/**
	 * check storage client socket is closed
	 *
	 * @return boolean
	 */
	@Override
	public boolean isClosed() {

		if (this.socket == null) {
			return true;
		}

		if (this.socket.isClosed()) {
			return true;
		} else {
			// 根据fastdfs的Active_Test_Cmd测试连通性
			ActiveTestCmd atcmd = new ActiveTestCmd();
			try {
				Result<Boolean> result = atcmd.exec(getSocket());
				// True,表示连接正常
				if (result.getData()) {
					return false;
				} else {
					return true;
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
			// 有异常，直接丢掉这个连接，让连接池回收
			return true;
		}
	}

}
