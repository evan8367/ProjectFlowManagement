package com.sdx.merak.common.redis.annotation;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.ClassUtils;

import com.sdx.merak.common.redis.RedisClient;
import com.sdx.merak.common.redis.dto.CacheException;
import com.sdx.merak.common.redis.dto.CacheKeys;
import com.sdx.merak.common.redis.dto.RedisStruct;
import com.sdx.merak.common.utils.CommonUtils;

/**
 * 〈一句话功能简述〉<br> 
 * 〈功能详细描述〉
 *
 * @see [相关类/方法]（可选）
 * @since [产品/模块版本] （可选）
 */
@Aspect
@Component
public class CacheAnnotationProcessor {

    @Autowired
    RedisClient redisClient;

    /**
     * 功能描述: <br>
     * 〈功能详细描述〉
     *
     * @param joinPoint
     * @return
     * @throws Throwable
     * @see [相关类/方法](可选)
     * @since [产品/模块版本](可选)
     */
    @Around("@annotation(com.sdx.merak.common.redis.annotation.RedisCache)")
    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
        Object methodReturnValue = null;
        try {
            Object[] methodArgs = joinPoint.getArgs();
            Signature signature = joinPoint.getSignature();
            if (signature instanceof MethodSignature && !hasNullArgument(methodArgs)) {
                MethodSignature methodSignature = (MethodSignature) signature;
                // 取得aop method的方法
                Method aopCacheMethod = methodSignature.getMethod();
                // 缓存标签的参数，一些缓存的配置
                RedisCache cacheParam = aopCacheMethod.getAnnotation(RedisCache.class);
                // 取redis 缓存
                String cachedValue = this.getCachedValue(cacheParam, methodArgs);
                // 没缓存
                if (StringUtils.isBlank(cachedValue)) {
                    // 调用方法
                    methodReturnValue = joinPoint.proceed();
                    if (null != methodReturnValue) {
                        this.setCacheValue(cacheParam, methodArgs, methodReturnValue);
                    }
                } else {
                    // 有缓存，反序列化
                    methodReturnValue = CommonUtils.GSON.fromJson(cachedValue, aopCacheMethod.getGenericReturnType());
                }
            } else {
                methodReturnValue = joinPoint.proceed();
            }
        } catch (Exception e) {
            throw e;
        }
        return methodReturnValue;
    }

    private void setCacheValue(RedisCache cacheParam, Object[] methodArgs, Object methodReturnValue) {
        CacheKeys cacheKeyEnum = cacheParam.key();
        String rawCacheKey = cacheKeyEnum.key();
        if (cacheParam.struct().equals(RedisStruct.STRINGS)) {
            // 取方法入参作为 key的一部分，限制为基本类型
            Object[] stringFields = this.buildField(methodArgs, cacheParam.fieldIndex());
            // abc%s + "123" -> abc123 返回的值为最终的缓存key
            String finalCacheKey = String.format(rawCacheKey, stringFields);
            this.redisClient.setString(finalCacheKey, CommonUtils.GSON.toJson(methodReturnValue));
            if (cacheKeyEnum.expire() > 0) {
                this.redisClient.expire(finalCacheKey, cacheKeyEnum.expire());
            }
        } else if (cacheParam.struct().equals(RedisStruct.HASH)) {
            // 数组变下划线连接的字符
            String hashField = this.buildFieldForHash(methodArgs, cacheParam.fieldIndex());
            this.redisClient.setHash(rawCacheKey, hashField, CommonUtils.GSON.toJson(methodReturnValue));
            // -1 if the key does not exist or if the key exist but has no associated expire.
            if (this.redisClient.ttl(rawCacheKey) < 0) {
                // 有效时间不为0且key为新插入则设置业务缓存的有效时间
                this.redisClient.expire(rawCacheKey, cacheKeyEnum.expire());
            }
        } else {
            throw new CacheException("unsupport struct!");
        }
    }

    private String getCachedValue(RedisCache cacheParam, Object[] methodArgs) {
        CacheKeys cacheKeyEnum = cacheParam.key();
        String rawCacheKey = cacheKeyEnum.key();
        if (cacheParam.struct().equals(RedisStruct.STRINGS)) {
            // 取方法入参作为 key的一部分，限制为基本类型
            Object[] stringFields = this.buildField(methodArgs, cacheParam.fieldIndex());
            // abc%s + "123" -> abc123 返回的值为最终的缓存key
            String finalCacheKey = String.format(rawCacheKey, stringFields);
            return this.redisClient.getString(finalCacheKey);
        } else if (cacheParam.struct().equals(RedisStruct.HASH)) {
            // 数组变下划线连接的字符
            String hashField = this.buildFieldForHash(methodArgs, cacheParam.fieldIndex());
            return this.redisClient.getHash(rawCacheKey, hashField);
        } else {
            throw new CacheException("unsupport struct!");
        }
    }

    /**
     * 功能描述： 输入参数：<按照参数定义顺序>
     * 
     * @param 参数说明 返回值: 类型 <说明>
     * @return 返回值
     * @throw 异常描述
     * @see 需要参见的其它内容
     */
    private boolean hasNullArgument(Object[] methodArgs) {
        boolean hasNullValue = false;
        if (null == methodArgs) {
            hasNullValue = true;
        } else {
            for (int i = 0; i < methodArgs.length; i++) {
                if (methodArgs[i] == null) {
                    hasNullValue = true;
                    break;
                }
            }
        }
        return hasNullValue;
    }

    /**
     * 
     * 功能描述：取缓存key的值
     * 
     * @param 参数说明 返回值: 类型 <说明>
     * @return 返回值
     * @throw 异常描述
     * @see 需要参见的其它内容
     */
    private Object[] buildField(Object[] args, int[] fields) {
        List<String> fieldArray = new ArrayList<String>();
        Object[] arr = new Object[] {};
        if (null != fields) {
            for (int i = 0; i < fields.length; i++) {
                Object arg = args[fields[i]];
                if (ClassUtils.isPrimitiveOrWrapper(arg.getClass()) || arg instanceof String) {
                    fieldArray.add(arg.toString());
                } else {
                    throw new RuntimeException("非法的 redis field.Field 只能为 基本类型或String");
                }
            }
        }
        return fieldArray.toArray(arr);
    }

    /**
     * 
     * 功能描述：将 分开的 值合成一个 值。eg: 123 ,abc,1ab->123_abc_1ab
     * 
     * @param 参数说明 返回值: 类型 <说明>
     * @return 返回值
     * @throw 异常描述
     * @see 需要参见的其它内容
     */
    private String buildFieldForHash(Object[] args, int[] fields) {
        StringBuilder sb = new StringBuilder();
        if (null != fields) {
            for (int i = 0; i < fields.length; i++) {
                Object arg = args[fields[i]];
                if (ClassUtils.isPrimitiveOrWrapper(arg.getClass()) || arg instanceof String) {
                    sb.append(arg.toString()).append("_");
                } else {
                    throw new RuntimeException("非法的 redis field.Field 只能为 基本类型或String");
                }
            }
        }
        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();
    }
}
